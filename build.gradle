/*
 * Copyright (C) 2017 - Matthew Barrett, Randy Forte, Brandon Hulbert,
 * Donald Miller
 *
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/**
 * The application plugin facilitates creating an executable JVM application.
 */

apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'edu.sc.seis.launch4j'

/**
 * This line specifies where the main.java file is found.
 */

mainClassName='View.Main'

/**
 * This statement declares where Gradle is to find directories
 * for source code, external resources, and test classes
 */

sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
		resources {
			srcDirs = ['src']
		}
	}

	test {
		java {
			srcDirs = ["Test"]
		}
	}
}

/**
 * The mavenCentral() function allows Gradle to access Maven's
 * central repositories. I also identify two external repositories
 * for dependencies not found in Maven Central.
 * NOTE: The dependency "testfx-core-4.0.0-20150226.214553-8-sources.jar"
 * is pulled from the sonatype URL.
 */

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'edu.sc.seis.gradle:launch4j:2.4.2'
	}
}

repositories {
	mavenCentral()
	jcenter()
	maven {
	url "https://github.com/screamingfrog/Maven/blob/master/uk/co/screamingfrog/AppleJavaExtensions/1.6/"
	url "https://oss.sonatype.org/content/repositories/snapshots/org/testfx/testfx-core/4.0.0-SNAPSHOT/"
    }
}

/**
 * Gradle grabs dependencies from the above repositories.
 */

dependencies {

	testCompile 'junit:junit:4.12'

	compile 'net.sf.biweekly:biweekly:0.6.1'
	compile 'commons-validator:commons-validator:1.6'
	compile 'com.google.guava:guava:21.0'
	compile 'org.hamcrest:hamcrest-all:1.3'
	compile 'org.hamcrest:hamcrest-core:1.3'
	compile 'org.hamcrest:hamcrest-generator:1.3'
	compile 'org.hamcrest:hamcrest-integration:1.3'
	compile 'org.hamcrest:hamcrest-junit:2.0.0.0'
	compile 'org.hamcrest:hamcrest-library:1.3'
	compile 'com.jfoenix:jfoenix:1.0.0'
	compile 'org.jfxtras:jfxtras-agenda:8.0-r5'
	compile 'org.jfxtras:jfxtras-common:8.0-r5'
	compile 'org.jfxtras:jfxtras-controls:8.0-r5'
	compile 'org.testfx:testfx-core:4.0.6-alpha'
	compile 'org.testfx:testfx-junit:4.0.6-alpha'
	compile 'org.testfx:testfx-junit5:4.0.6-alpha'
	compile 'org.testfx:testfx-legacy:4.0.6-alpha'
	compile 'com.github.mangstadt:vinnie:2.0.1'
	compile fileTree(dir: 'src', include: ['*.jar'])

}

/**
 * Ensure the build fails if any unit test fails.
 */

test {
	ignoreFailures = true
}

/**
 * Tells Gradle to assemble a JAR archive.
 */

jar {
	manifest.attributes "Main-Class": mainClassName
	baseName = project.name
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

/**
 * Create executable from jar
 */
launch4j {
	outputDir = 'libs'
	outfile = 'raiderplanner.exe'
	icon = '/../../icon.ico'
	mainClassName = mainClassName
	jar = "raiderplanner.jar"
	productName = 'Raider Planner'
	fileDescription = 'The best study planner since the Gantt Diagram'
}

checkstyle {
	configFile = '.checkstyle.xml' as File
	maxWarnings = 2746
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled false
		html.enabled true
		// html.stylesheet resources.text.fromFile( 'config/xsl/findbugs-custom.xsl' )
	}
	ignoreFailures = true
}
